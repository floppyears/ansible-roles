#!/bin/sh
# jenkins-run.sh - starts or restarts an api with supervisorctl
# usually called remotely by jenkins

# usage: jenkins-run.sh API-NAME

set -eu

api=${1:-}
if [ -z "$api" ]; then
    echo 2>&1 "usage: jenkins-run.sh API-NAME"
    exit 1
fi
if [ "$(echo $api | tr -d "A-Za-z0-9-_")" ]; then
    echo 2>&1 "invalid api name: $api"
    exit 1
fi
if [ ! -d /apis/apis/"$api" ]; then
    echo 2>&1 "api does not exist: $api"
    exit 1
fi

api_path=/apis/apis/$api
cd $api_path &&

node="{{ user }}@$(hostname):$api"
archive=$(ls "$api"-*-all.jar | sort | tail -1)
config=/apis/config/$api.yaml
env=/apis/env/$api.env

if [ ! -e "$config" ]; then
    config=/apis/apis/$api/configuration.yaml
fi

if [ -r "$env" ]; then
    while IFS='\n' read -r line; do
        case "$line" in
        \#*|'')
            ;; # comment
        PATH=*)
            ;; # not allowed
        [A-Z]*=*)
            export "$line"
            ;;
        *)
            echo "ignoring invalid line \"$line\""
        esac
    done <"$env"
fi

uid="$(id -u {{ user }})"
gid="$(id -g {{ user }})"

# Stop and destroy container if it's already running.
echo "Stop existing container"
docker rm -f $api &

# Sometimes docker will still think a container exists after doing "docker rm"
# Pause the script for a few seconds before creating the container again
sleep 3

echo "Start container"
if [ -e /apis/appd/javaagent.jar ]
then
    docker run \
        -d \
        --name "$api" \
        --label jar=$archive \
        --restart always \
        --user="$uid:$gid" \
        --workdir="$api_path" \
        --env-file "$env" \
        --network host \
        --health-cmd='curl -k -fsS --user $USER:$PASSWD https://localhost:$PORT/api/v1' \
        --health-interval=1m \
        --volume /apis/keytool_files/apidev.keystore:/apis/keytool_files/apidev.keystore:ro \
        --volume /apis/keytool_files/apidev.truststore:/apis/keytool_files/apidev.truststore:ro \
        --volume $api_path:$api_path \
        --volume $config:$config \
        --volume /apis/appd:/apis/appd \
        {{ docker_image }} \
        /bin/bash -c "java -javaagent:/apis/appd/javaagent.jar -Dappdynamics.agent.applicationName=$api -Dappdynamics.agent.tierName=$api -Dappdynamics.agent.nodeName=$node -jar $archive server $config"
else
    docker run \
        -d \
        --name "$api" \
        --label jar=$archive \
        --restart always \
        --user="$uid:$gid" \
        --workdir="$api_path" \
        --env-file "$env" \
        --network host \
        --health-cmd='curl -k -fsS --user $USER:$PASSWD https://localhost:$PORT/api/v1' \
        --health-interval=1m \
        --volume /apis/keytool_files/apidev.keystore:/apis/keytool_files/apidev.keystore:ro \
        --volume /apis/keytool_files/apidev.truststore:/apis/keytool_files/apidev.truststore:ro \
        --volume $api_path:$api_path \
        --volume $config:$config \
        {{ docker_image }} \
        /bin/bash -c "java -jar $archive server $config"
fi

if [[ ! $(docker ps -q -f name=$api) ]]; then
    echo "ERROR: Container not running"
    exit 1
fi
